TODO LIST
=========

[] 20/02/2018 ->
Use sparse matrixes to implement adjacency matrix when needed

[] 20/02/2018 ->
Implement sparse matrix class.

[] 26/02/2018 ->
Implement an algorithm to find all connected components of a graph.

	[] 23/08/2018 ->
	Directed graphs
	
	[] 23/08/2018 ->
	Undirected graphs

[] 24/02/2018 ->
Counting triangles:
Move current algorithm to a namespace
Implement triangle counting algorithm using adjacency matrix
Paper:			http://www.d.umn.edu/math/Technical%20Reports/Technical%20Reports%202007-/TR%202012/yang.pdf
Implementation:	https://www.geeksforgeeks.org/number-of-triangles-in-a-undirected-graph/

[v] 23/08/2018 -> 24/08/2018
Refactor code for generating graphs. Make a directory called
generate/ with subdirectories for social graphs, classic graphs.
Each directory should have another subdirectory called random_graphs.
Example:
generate/switching.hpp
generate/switching.cpp

generate/classic/{...}
generate/social/{...}

[v] 22/08/2018 -> 23/08/2018
Implement Erdos-Renyi model

[v] 06/03/2018 -> 19/08/2018
Implement SIS and SIR with node immunity

[v] 26/02/2018 -> 15/08/2018
Use class 'svector' to implement the adjacency list of the graph data structure.

[v] 24/03/2018 -> 28/05/2018
Add documentation with Doxygen

[v] 31/03/2018 -> 22/04/2018
Refactor code in traversal.hpp

[v] 16/02/2018 -> 22/04/2018
Implement distance and path-finding methods using Dijkstra

[v] 16/02/2018 -> 31/03/2018 (actually, before that date)
Implement generic Dijkstra

[v] 25/03/2018 -> 31/03/2018 (actually, before that date)
Adapt functions in traversal namespace to admit abstract graphs.

[v] 16/03/2018 -> 25/03/2018
Implement undirected weighted graph

[v] 16/02/2018 -> 07/03/2018
Implement generic DFS

[v] 16/02/2018 -> 05/03/2018
Implement the boolean path using actual bitsets (not vector<bool>)

[X] 26/02/2018 ->
Implement betweennes centrality metric (that uses a boolean path)
** Edge betweenness *may* be defined as an average of the betweenness
centrality of its endpoints. Already solved.

	[X] 26/02/2018 ->
	For a single edge
	
	[X] 26/02/2018 ->
	For all edges of a graph

[v] 16/02/2018 -> 26/02/2018
Implement betweennes centrality metric (that uses a boolean path)

	[v] 16/02/2018 -> 26/02/2018
	For a single vertex

	[v] 16/02/2018 -> 26/02/2018
	For all vertices of a graph

[X] 13/02/2018 ->
Implement betweennes centrality metric
** This is solved when using boolean paths

	[X] 13/02/2018 ->
	For a single vertex

	[X] 13/02/2018 ->
	For all vertices of a graph

[X] 20/02/2018 -> 20/02/2018
Do not use a vertex-all method to count the number of shortest paths from node to node.
** We need to traverse all the graph apparently

[v] 20/02/2018 -> 25/02/2018
Implement algorithm to enumerate all shortest paths:

    [v] 20/02/2018 -> 25/02/2018
	As boolean paths

        [v] 20/02/2018 -> 25/02/2018
		Between two nodes

        [v] 20/02/2018 -> 25/02/2018
		From a node to the rest

        [v] 20/02/2018 -> 25/02/2018
		From a any node to any other node

	[v] 20/02/2018 -> 20/02/2018
	As node paths

		[v] 20/02/2018 -> 20/02/2018
		Between two nodes

		[v] 20/02/2018 -> 20/02/2018
		From a node to the rest

		[v] 20/02/2018 -> 20/02/2018
		From a any node to any other node

[v] 16/02/2018 -> 18/02/2018
Implement algorithm to count the number of shortest pahts:

	[v] 16/02/2018 -> 18/02/2018
	Between two nodes

	[v] 16/02/2018 -> 17/02/2018
	From a node to the rest

	[v] 16/02/2018 -> 17/02/2018
	From a any node to any other node

[v] 13/02/2018 -> 16/02/2018
Implement two classes that implement paths as

	[v] 16/02/2018 -> 16/02/2018
	List of vertices

	[v] 16/02/2018 -> 16/02/2018
	Bitsets (a vertex is in the path if the corresponding bit is set to 1)

[v] 13/02/2018 -> 16/02/2018
Debug path-finding with BFS

[v] 13/02/2018 -> 16/02/2018
Implement all-to-all path finding

[v] 13/02/2018 -> 13/02/2018
Add option to read graphs in edge list format in main file
